{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","searchNews","e","preventDefault","setState","ReturnedArticles","pointerToThis","url","terms","undefined","searchTermsArray","split","word","category","process","console","log","fetch","then","response","json","key","articles","state","push","queryResultPageFullURL","queryResultPageTitle","title","queryResultPageSnippet","description","queryResultPageDate","publishedAt","queryResultPicture","urlToImage","forceUpdate","changeSearchTerms","SearchTerms","target","value","changeCategory","SearchResults","key3","this","className","href","rel","dangerouslySetInnerHTML","__html","src","alt","action","type","onChange","placeholder","onClick","name","id","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAgJeA,G,wDAtIb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAcRC,WAAa,SAACC,GACZA,EAAEC,iBAEF,EAAKC,SAAS,CACZC,iBAAkB,KAIpB,IAAMC,EAAa,eAGfC,EAAO,wCAEX,GAAmB,KAAf,EAAKC,YAA+BC,IAAf,EAAKD,MAAoB,CAChD,IAAIE,EAAmB,EAAKF,MAAMG,MAAM,KACxC,IAAK,IAAIC,KAAQF,EACfH,GAAY,KACZA,GAAYG,EAAiBE,GAC7BL,GAAY,SAKME,IAAlB,EAAKI,UAA4C,mBAAlB,EAAKA,SACtCN,GAAY,8DAEZA,EAAMA,EAAM,YAAc,EAAKM,SAAW,IAG5CN,GAAY,uBACZA,GAhDiBO,mCAiDjBC,QAAQC,IAAIT,GAEZU,MAAMV,GACHW,MACC,SAAUC,GACR,OAAOA,EAASC,UAGnBF,MACC,SAAUC,GAER,IAAK,IAAIE,KAAOF,EAASG,SACvBhB,EAAciB,MAAMlB,iBAAiBmB,KAAK,CACxCC,uBAAwBN,EAASG,SAASD,GAAKd,IAC/CmB,qBAAsBP,EAASG,SAASD,GAAKM,MAC7CC,uBAAwB,GAAKT,EAASG,SAASD,GAAKQ,YACpDC,oBAAqB,gBAAkBX,EAASG,SAASD,GAAKU,YAAYpB,MAAM,KAAK,GACrFqB,mBAAoB,GAAKb,EAASG,SAASD,GAAKY,aAGpD3B,EAAc4B,kBAlEH,EAuEnBC,kBAAoB,SAACjC,GACnB,EAAKE,SAAS,CACZgC,YAAalC,EAAEmC,OAAOC,QAExB,EAAK9B,MAAQN,EAAEmC,OAAOC,OA3EL,EA8EnBC,eAAiB,SAACrC,GAChB,EAAKW,SAAWX,EAAEmC,OAAOC,OA7EzB,EAAKf,MAAQ,CAEXlB,iBAAkB,GAElB+B,YAAa,IANE,E,qDAmFjB,IAAII,EAAgB,GAOpB,IAAK,IAAIC,KAAQC,KAAKnB,MAAMlB,iBAC1BmC,EAAchB,KACZ,sBAAKmB,UAAU,kBAAf,UACE,6BACE,mBAAGC,KAAMF,KAAKnB,MAAMlB,iBAAiBoC,GAAMhB,uBAAwBY,OAAO,SAASQ,IAAI,aAAvF,SACCH,KAAKnB,MAAMlB,iBAAiBoC,GAAMf,yBAGrC,mBAAGiB,UAAU,OAAOG,wBAAyB,CAACC,OAAQL,KAAKnB,MAAMlB,iBAAiBoC,GAAMX,uBACxF,sBAAMa,UAAU,OAAhB,SACE,mBAAGC,KAAMF,KAAKnB,MAAMlB,iBAAiBoC,GAAMhB,uBAAwBY,OAAO,SAASQ,IAAI,aAAvF,SACCH,KAAKnB,MAAMlB,iBAAiBoC,GAAMhB,2BAGrC,qBAAKkB,UAAU,iBAAf,SACE,qBAAKK,IAAKN,KAAKnB,MAAMlB,iBAAiBoC,GAAMT,mBAAoBiB,IAAI,cAEtE,mBAAGN,UAAU,cAAcG,wBAAyB,CAACC,OAAQL,KAAKnB,MAAMlB,iBAAiBoC,GAAMb,4BAf3Da,IAoB1C,OACE,sBAAKE,UAAU,MAAf,UACE,kDACA,uBAAMO,OAAO,GAAb,UACE,uBAAOC,KAAK,OAAOb,MAAOI,KAAKnB,MAAMa,aAAe,GAAIgB,SAAUV,KAAKP,kBAAmBkB,YAAY,oBAItG,wBAAQV,UAAU,SAASQ,KAAK,SAASG,QAASZ,KAAKzC,WAAvD,qBACA,yBAAQ0C,UAAU,SAASY,KAAK,WAAWH,SAAUV,KAAKH,eAAgBiB,GAAG,WAA7E,UACE,wBAAQlB,MAAM,iBAAd,4BACA,wBAAQA,MAAM,gBAAd,2BACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,aAAd,8BAGHE,S,GAjISiB,IAAMC,YCGTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3C,MAAK,YAAkD,IAA/C4C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c041b6be.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n/**\nInitial setup and UI made with reference to: \nhttps://github.com/simonjsuh/Wikipedia-Search-API-using-React.js\n*/\nconst API_KEY = \"\" + process.env.REACT_APP_API_KEY;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //Articles\n      ReturnedArticles: [],\n      //Search terms in search bar\n      SearchTerms: '',\n    }\n    //search terms var for backend\n    var terms;\n    //category for api hit\n    var category;\n  }\n\n  //perform search\n  searchNews = (e) => {\n    e.preventDefault();\n    \n    this.setState({\n      ReturnedArticles: []\n    });\n    \n    //pointer for updating on submission\n    const pointerToThis = this;\n\n    //Building URL for API hit\n    var url = (\"https://newsapi.org/v2/top-headlines?\")\n    //Parsing search terms and appending them to URL\n    if (this.terms !== \"\" && this.terms !== undefined){\n      var searchTermsArray = this.terms.split(\" \"); \n      for (var word in searchTermsArray){\n        url = url + \"q=\"\n        url = url + searchTermsArray[word]\n        url = url + \"&\"\n      }\n    }\n\n    //add on category\n    if (this.category === undefined || this.category === \"All Categories\") {\n      url = url + \"category=entertainment&category=sports&category=technology&\"\n    } else {\n      url = url + \"category=\" + this.category + \"&\";\n    }\n    //tag on key\n    url = url + \"pageSize=100&apiKey=\"\n    url = url + API_KEY;\n    console.log(url)\n    //get json from API hit and update articles to be displayed accordingly\n    fetch(url)\n      .then(\n        function (response) {\n          return response.json();\n        }\n      )\n      .then(\n        function (response) {\n          //fetch data from API hit\n          for (var key in response.articles) {\n            pointerToThis.state.ReturnedArticles.push({\n              queryResultPageFullURL: response.articles[key].url,\n              queryResultPageTitle: response.articles[key].title,\n              queryResultPageSnippet: \"\" + response.articles[key].description,\n              queryResultPageDate: \"Published on \" + response.articles[key].publishedAt.split(\"T\")[0],\n              queryResultPicture: \"\" + response.articles[key].urlToImage\n            });\n          }\n          pointerToThis.forceUpdate();\n        }\n      )      \n  }\n\n  changeSearchTerms = (e) => {\n    this.setState({\n      SearchTerms: e.target.value\n    });\n    this.terms = e.target.value;\n  }\n\n  changeCategory = (e) => {\n    this.category = e.target.value;\n  }\n\n  render() {\n    let SearchResults = [];\n    /*\n    - Title hyperlinked to article in new window\n    - Full url, linked to article in new window\n    - Date of publication\n    - Snippet of article along with image\n    */\n    for (var key3 in this.state.ReturnedArticles) {\n      SearchResults.push(\n        <div className=\"searchResultDiv\" key={key3}>\n          <h3>\n            <a href={this.state.ReturnedArticles[key3].queryResultPageFullURL} target=\"_blank\" rel=\"noreferrer\">\n            {this.state.ReturnedArticles[key3].queryResultPageTitle}\n            </a>\n          </h3>\n          <p className=\"date\" dangerouslySetInnerHTML={{__html: this.state.ReturnedArticles[key3].queryResultPageDate}}></p>\n          <span className='link'>\n            <a href={this.state.ReturnedArticles[key3].queryResultPageFullURL} target=\"_blank\" rel=\"noreferrer\">\n            {this.state.ReturnedArticles[key3].queryResultPageFullURL}\n            </a>\n          </span>\n          <div className=\"imageContainer\">\n            <img src={this.state.ReturnedArticles[key3].queryResultPicture} alt=\"Article\" />\n          </div>\n          <p className=\"description\" dangerouslySetInnerHTML={{__html: this.state.ReturnedArticles[key3].queryResultPageSnippet}}></p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Search anything!</h1>\n        <form action=\"\">\n          <input type=\"text\" value={this.state.SearchTerms || ''} onChange={this.changeSearchTerms} placeholder='Search Articles' />\n          {\n          // 1 text box, 4 buttons vs Change to dropdown and have value update the category?\n          }\n          <button className=\"button\" type='submit' onClick={this.searchNews}>Search:</button>\n          <select className=\"select\" name=\"Category\" onChange={this.changeCategory} id=\"category\">\n            <option value=\"All Categories\">All Categories</option>\n            <option value=\"entertainment\">Entertainment</option>\n            <option value=\"sports\">Sports</option>\n            <option value=\"technology\">Technology</option>\n          </select>\n        </form>\n        {SearchResults}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}